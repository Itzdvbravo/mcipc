#! /usr/bin/env python3
"""rconclt.

A Minecraft RCON client.

Usage:
    rconclt <server> datetime [--format=<format>] [options]
    rconclt <server> fortune [--long] [--offensive] [options]
    rconclt <server> <command> [<args>...] [options]

Options:
    --passwd=<passwd>   Specifies the respective RCON password.
    --format=<format>   Specifies the datetime format [default: %c].
    --long              Also generate long fortunes.
    --offensive         Only genenrate offensive fortunes.
    --debug             Enters debug mode.
    --help, -h          Shows this page.
"""
from logging import DEBUG, INFO, basicConfig, getLogger
from sys import exit, stderr    # pylint: disable=W0622

from mcipc.config import LOG_FORMAT, InvalidCredentialsError, Credentials
from mcipc.rcon.config import CONFIG
from mcipc.rcon.playground import Client


LOGGER = getLogger(__file__)


def main():
    """Runs the RCON client."""

    try:
        from docopt import docopt
    except ModuleNotFoundError:
        print('docopt not installed. CLI not available.', file=stderr)
        exit(3)

    options = docopt(__doc__)
    log_level = DEBUG if options['--debug'] else INFO
    basicConfig(level=log_level, format=LOG_FORMAT)
    server = options['<server>']

    try:
        host, port, passwd = Credentials.from_string(server)
    except InvalidCredentialsError:
        try:
            host, port, passwd = CONFIG.servers[server]
        except KeyError:
            LOGGER.error('No such server: %s.', server)
            exit(2)

    if passwd is None:
        passwd = options['--passwd'] or ''

    with Client(host, port) as client:
        if client.login(passwd):
            if options['datetime']:
                result = client.datetime(frmt=options['--format'])
            elif options['fortune']:
                result = client.fortune(
                    short=not options['--long'],
                    offensive=options['--offensive'])
            else:
                result = client.run(options['<command>'], *options['<args>'])

            if result:
                LOGGER.info(result)
        else:
            LOGGER.error('Failed to log in.')
            exit(1)


if __name__ == '__main__':
    main()
